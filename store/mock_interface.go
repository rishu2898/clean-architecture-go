// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package mock_store is a generated GoMock package.
package store

import (
	models "Project_store/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockProductStore is a mock of ProductStore interface.
type MockProductStore struct {
	ctrl     *gomock.Controller
	recorder *MockProductStoreMockRecorder
}

// MockProductStoreMockRecorder is the mock recorder for MockProductStore.
type MockProductStoreMockRecorder struct {
	mock *MockProductStore
}

// NewMockProductStore creates a new mock instance.
func NewMockProductStore(ctrl *gomock.Controller) *MockProductStore {
	mock := &MockProductStore{ctrl: ctrl}
	mock.recorder = &MockProductStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProductStore) EXPECT() *MockProductStoreMockRecorder {
	return m.recorder
}

// GetById mocks base method.
func (m *MockProductStore) GetById(id int64) (models.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", id)
	ret0, _ := ret[0].(models.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockProductStoreMockRecorder) GetById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockProductStore)(nil).GetById), id)
}

// GetByName mocks base method.
func (m *MockProductStore) GetByName(ProductName string) (models.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByName", ProductName)
	ret0, _ := ret[0].(models.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByName indicates an expected call of GetByName.
func (mr *MockProductStoreMockRecorder) GetByName(ProductName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByName", reflect.TypeOf((*MockProductStore)(nil).GetByName), ProductName)
}

// InsertProduct mocks base method.
func (m *MockProductStore) InsertProduct(prod models.Product) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertProduct", prod)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertProduct indicates an expected call of InsertProduct.
func (mr *MockProductStoreMockRecorder) InsertProduct(prod interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertProduct", reflect.TypeOf((*MockProductStore)(nil).InsertProduct), prod)
}

// MockBrandStore is a mock of BrandStore interface.
type MockBrandStore struct {
	ctrl     *gomock.Controller
	recorder *MockBrandStoreMockRecorder
}

// MockBrandStoreMockRecorder is the mock recorder for MockBrandStore.
type MockBrandStoreMockRecorder struct {
	mock *MockBrandStore
}

// NewMockBrandStore creates a new mock instance.
func NewMockBrandStore(ctrl *gomock.Controller) *MockBrandStore {
	mock := &MockBrandStore{ctrl: ctrl}
	mock.recorder = &MockBrandStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBrandStore) EXPECT() *MockBrandStoreMockRecorder {
	return m.recorder
}

// GetById mocks base method.
func (m *MockBrandStore) GetById(id int64) (models.Brand, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", id)
	ret0, _ := ret[0].(models.Brand)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockBrandStoreMockRecorder) GetById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockBrandStore)(nil).GetById), id)
}

// GetByName mocks base method.
func (m *MockBrandStore) GetByName(brandName string) (models.Brand, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByName", brandName)
	ret0, _ := ret[0].(models.Brand)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByName indicates an expected call of GetByName.
func (mr *MockBrandStoreMockRecorder) GetByName(brandName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByName", reflect.TypeOf((*MockBrandStore)(nil).GetByName), brandName)
}

// InsertBrand mocks base method.
func (m *MockBrandStore) InsertBrand(name string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertBrand", name)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertBrand indicates an expected call of InsertBrand.
func (mr *MockBrandStoreMockRecorder) InsertBrand(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertBrand", reflect.TypeOf((*MockBrandStore)(nil).InsertBrand), name)
}
